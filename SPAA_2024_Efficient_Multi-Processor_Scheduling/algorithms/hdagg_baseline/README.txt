This directory contains the code necessary to run the external HDagg baseline by Zarebavani et al. The directory is a pruned version of the sibling directory for our schedulers, only keeping the few files and functions from the Python scripts that are required running HDagg (reading input files, invoking the complied HDagg, evaluating the cost of the returned schedule). Note that the scripts also include some extra functionality required for this, e.g. writing the DAG into an input file in a triangular matrix format. For details on e.g. the role of the subfolders, the file formats, or the role of specific scripts, refer to the sibling folder "our_schedulers".

In order to run these scripts, a slightly modified version of HDagg (which outputs the HDagg schedule in our format) needs to be compiled. For this:
- Download the original HDagg implementation, by cloning the git repository of Zarebavani et al. from https://github.com/sympiler/aggregation . For our experiments, we used the version of this code from November 2023.
- Execute the required modifications by applying the patch files "lbc_demo.patch" and "CMakeLists.patch", found in the "algos" folder, to the files "example/lbc_demo.cpp" and "example/CMakeLists.txt", respectively, in the cloned repository. In Linux, the patch files can be applied with "patch -p1 --lbc_demo.cpp < lbc_demo.patch" and "patch -p1 --CMakeLists.txt < CMakeLists.patch", after copying the patch files into the "example" folder.
- Once the patching is done, build the Sympiler tool according to the instructions in https://github.com/sympiler/aggregation
- From the "build/example" folder, take the "lbc_demo" executable file, and copy it into the algos folder in our directory. Our scripts will use this file to run HDagg and output the corresponding schedules.

Once the "lbc_demo" executable is copied, the scripts here can be executed in the same way as the scheduling scripts in the sibling folder: by running the "main.py" Python script in the "scripts" subfolder, using the same config file format. Upon running, the script writes the cost of the returned schedules into a "results.CSV" file.